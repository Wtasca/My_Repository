-- 1. Check for NULL values in each column

SELECT 
  COUNT(*) AS total_rows,
  SUM(IF(CreditScore IS NULL, 1, 0)) AS null_CreditScore,
  SUM(IF(Geography IS NULL, 1, 0)) AS null_Geography,
  SUM(IF(Gender IS NULL, 1, 0)) AS null_Gender,
  SUM(IF(Age IS NULL, 1, 0)) AS null_Age,
  SUM(IF(Balance IS NULL, 1, 0)) AS null_Balance,
  SUM(IF(NumOfProducts IS NULL, 1, 0)) AS null_NumOfProducts,
  SUM(IF(HasCrCard IS NULL, 1, 0)) AS null_HasCrCard,
  SUM(IF(IsActiveMember IS NULL, 1, 0)) AS null_IsActiveMember,
  SUM(IF(EstimatedSalary IS NULL, 1, 0)) AS null_EstimatedSalary
FROM churn_modelling;

-- 2. Find duplicate rows based on CustomerId (assuming CustomerId should be unique)
DELETE t1
FROM churn_modelling t1
JOIN (
  SELECT CustomerId, COUNT(*) AS count_duplicates
  FROM churn_modelling
  GROUP BY CustomerId
  HAVING count_duplicates > 1
) t2 ON t1.CustomerId = t2.CustomerId;

-- 3. Standardize Geography and Gender text fields (convert to lowercase, remove leading/trailing spaces)
UPDATE churn_modelling
SET Geography = LOWER(TRIM(Geography)),
    Gender = LOWER(TRIM(Gender));

-- 4. Convert IsActiveMember and HasCrCard to integer type if they are stored as strings
ALTER TABLE churn_modelling
MODIFY IsActiveMember INT;

ALTER TABLE churn_modelling
MODIFY HasCrCard INT;

-- 5. Ensure EstimatedSalary is numeric
ALTER TABLE churn_modelling
MODIFY EstimatedSalary DECIMAL(10, 2);

-- 6. Check current data types
SELECT column_name, column_type
FROM information_schema.columns
WHERE table_name = 'churn_modelling';

-- 7. Ensure Age is an integer, Balance and EstimatedSalary are numeric
ALTER TABLE churn_modelling
MODIFY Age INT;

ALTER TABLE churn_modelling
MODIFY Balance DECIMAL(10, 2);

ALTER TABLE churn_modelling
MODIFY EstimatedSalary DECIMAL(10, 2);
